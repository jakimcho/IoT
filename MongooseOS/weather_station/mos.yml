author: mongoose-os
description: A Mongoose OS app skeleton
version: 1.0

libs_version: ${mos.version}
modules_version: ${mos.version}
mongoose_os_version: ${mos.version}

# Optional. List of tags for online search.
tags:
  - mqtt
  - c
  - js

# List of files / directories with C sources. No slashes at the end of dir names.
sources:
  - src

# List of dirs. Files from these dirs will be copied to the device filesystem
filesystem:
  - fs

# Custom configuration entries, settable via "device configuration"
# Below is a custom firmware configuration example.
# Uncomment and modify according to your needs:

config_schema:
  - ["app", "o", { title: "DHT sensor reading" }]
  - ["app.pin", "i", 2, { title: "GPIO pin a sensor is attached to" }]
  - ["wifi.ap.enable", false]

  - ["wifi.sta.ssid", "*********"]
  - ["wifi.sta.pass", "*******"]
  - ["wifi.sta.enable", true]

  - ["wifi.sta1.ssid", "*******"]
  - ["wifi.sta1.pass", "**********"]
  - ["wifi.sta1.enable", true]

  - ["mqtt", "o", { title: "MQTT settings" }]
  - ["mqtt.enable", true]
  - ["mqtt.server", "farmer.cloudmqtt.com:10614"]
  - ["mqtt.user", "*******"]
  - ["mqtt.pass", "*********"]
  - ["mqtt.client_id", "[client_id]"]

  - ["dash.enable", "b", true, { "title": "Enable" }]
  - ["dash.token", "s", "JBJFDcGxNRVEeT99g4o8yDQ", { "title": "Access token" }]
  - [
      "dash.server",
      "s",
      "wss://mdash.net/api/v2/rpc",
      { "title": "Server address" },
    ]
  - [
      "dash.ssl_cert",
      "s",
      "",
      { title: "Client certificate to present to the server" },
    ]
  - [
      "dash.ssl_key",
      "s",
      "",
      { title: "Private key corresponding to the certificate" },
    ]
  - [
      "dash.ssl_ca_cert",
      "s",
      "ca.pem",
      { "title": "Verify server certificate using this CA bundle" },
    ]
  - ["mqtt1.enable", false]
  - ["dash.send_logs", "b", false, { "title": "Send logs" }]

# These settings get compiled into the C structure, and can be accessed
# from the C code this way:
#
# printf("Hello from %s!\n", mgos_sys_config_get_device_id());
#
# Settings are cool: can be modified remotely without full firmware upgrade!
#
# To see all available compiled settings, buid the firmware and open
# build/gen/mgos_config.h file.
#
# Also, in this config_schema section, you can override existing
# settings that has been created by other libraries. For example, debug log
# level is 2 by default. For this firmware we can override it to 3:
#
# config_schema:
#  - ["debug.level", 3]

libs:
  - origin: https://github.com/mongoose-os-libs/boards
  - origin: https://github.com/mongoose-os-libs/core
  - origin: https://github.com/mongoose-os-libs/dash
  - origin: https://github.com/mongoose-os-libs/ca-bundle
  - origin: https://github.com/mongoose-os-libs/rpc-service-config
  - origin: https://github.com/mongoose-os-libs/rpc-service-fs
  - origin: https://github.com/mongoose-os-libs/rpc-service-ota
  - origin: https://github.com/mongoose-os-libs/rpc-service-wifi
  - origin: https://github.com/mongoose-os-libs/rpc-uart
  - origin: https://github.com/mongoose-os-libs/wifi
  - origin: https://github.com/mongoose-os-libs/ota-http-server
  - origin: https://github.com/mongoose-os-libs/ota-shadow
  - origin: https://github.com/mongoose-os-libs/dht
  - origin: https://github.com/mongoose-os-libs/mjs
  - origin: https://github.com/mongoose-os-libs/mqtt
  - origin: https://github.com/mongoose-os-libs/core
  - origin: https://github.com/mongoose-os-libs/rpc-ws
  - origin: https://github.com/mongoose-os-libs/shadow

# Used by the mos tool to catch mos binaries incompatible with this file format
manifest_version: 2017-09-29
